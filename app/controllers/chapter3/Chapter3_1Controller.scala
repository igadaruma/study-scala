package controllers.chapter3

import play.api.mvc._

import javax.inject._

@Singleton
class Chapter3_1Controller @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def step1_1 = Action { _ =>
    // 1. 変数とリテラル
    // 1-1. 初めての変数(var)

    // ”変数"は値(データ)の入れ物📦みたいな感じです。
    // 変数にはそれぞれ名前がつけられるので、
    // その名前を使って後から中のデータを取り出すことができます。

    // 例えば以下のように書くと、変数を作って値を保持させることができます。
    // var 変数名 = 変数に入れる値
    var message = "こんちゃーす"

    // 作った変数(message)は以下のように使うことができます。
    Ok(message).as(HTML)

    // 【注意】
    // 変数名は数字から始まったり、日本語や、予約語と呼ばれる名前につかえないものがあります。
    // IntelliJ等でプログラムを書いている場合は、使えない名前だと、文字色が変わったりして、
    // 密かに教えてくれます。予約語については今は詳しく触れないですが、学習が進むにつれ、
    // 自ずとわかってくると思います。
  }

  def step1_2 = Action { _ =>
    // 1. 変数とリテラル
    // 1-2. 文字列リテラル 

    // 既に登場していましたが、
    // `"`(二重引用符・ダブルクォーテーション)で囲まれた文字は、
    // "文字列"と呼ばれ、文字データを表しています。
    // このような、データをプログラミング言語レベルで直接的に表したもの(うまく説明できない)をリテラルと呼びます。
    // (※文字列以外のリテラルも存在します。今後紹介していきます。)
    // 一方で、変数名等は`"`は付けずにそのまま記載します。

    // 改めて、以下を見ると、
    // 変数messageに文字列を入れている処理が書かれています。
    var message = "こんちゃーす"

    // 前回は正しく、以下と記載していましたが、
    // Ok(message).as(HTML)

    // 以下のように、messageを`"`で囲ってしまうと、
    // 全然別の意味となり、変数messageとは関係なく、
    // "message"という文字列が表示されることになるので、
    // 別物だということを注意しておきましょう。
    Ok("message").as(HTML)
  }

  def step1_3 = Action { _ =>
    // 1. 変数とリテラル
    // 1-3. 変数値の上書き 

    var message = "こんちゃーす"
    // var変数の値は以下のように値を入れ替えられます。
    // 入れ替え時は"var"は記載しません。
    // ただ、それだけのことです。
    message = "はい。みなさん、こんばんは。"
    Ok(message).as(HTML)
  }

  def step1_4 = Action { _ =>
    // 1. 変数とリテラル
    // 1-4. 初めてのval 

    val message = "こんちゃーす"
    // val変数の値は変更できません。varとの違いはそれだけ。
    // なので以下を(コメントではない形で)記載するとエラーになります。
    // message = "はい。みなさん、こんばんは。"
    Ok(message).as(HTML)

    // え？じゃあvarの方が良くね？
    // 実はそうでもないんです。なぜかというとそれは秘密です🙊
    // 私個人は、お仕事の時なら、
    // むしろvarは稀にしか使わないということだけ今はお伝えしておきます・・！

    // valは値が変わらないので、
    // "変数"ではなく"定数"と呼ばれることがありそうですが、 
    // このシリーズでは、varもvalも"変数"と呼んじゃいます。
  }

}
