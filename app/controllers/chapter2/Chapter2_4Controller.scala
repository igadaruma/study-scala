package controllers.chapter2

import play.api.mvc._

import javax.inject._

@Singleton
class Chapter2_4Controller @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def chapter2_4_1 = Action { _ =>
    // 4. 繰り返しとコレクション
    // 4-1. List

    // これまでに、
    // ①上からシンプルに順番にプログラムが実行されていく処理
    // ②条件による分岐
    // を見てきたわけなのですが、お次は、
    // ③繰り返し・ループ処理
    // と呼ばれるものを見ていきます。

    // 実はこの①②③を利用すれば、理論上、
    // どんな理論的手続き(アルゴリズム)も表現できると言われてたりします。
    // つまるところ、プログラム大原則をマスターしてしまったことになります。
    // ささ。早速やりましょう。

    // と、言いたいところですが、
    // その前に、繰り返し処理をするにあたり、
    // それに対してとっても身近な存在である、
    // コレクション系の型をまずは見ていきます。

    // そもそもコレクションって何よ？ですが、
    // "複数の値を、1つの変数に寄せ集めるための型"
    // と捉えていただくのがいいかもしれません。
    // コレクション型といっても、たくさん種類があるのですが、
    // まずはその代表格であるListを見ていきます。
    // 以下のように作成します。
    val listInt: List[Int] = List(1, 2, 3)
    // `listInt`には1と2と3がぎゅっと詰まったような感じになっています。

    // 繰り返しとは直接関係無いのですが、
    // 参考までに、中の値を取り出す時は`(何番目)`というのをつけて取り出せます。
    // ただし！何番目というのの開始番号は0です。
    // 慣れないと間違えやすいので注意しましょう！
    val one = listInt(0) // 1
    val two = listInt(1) // 2
    val three = listInt(2) // 3
    // val four = listInt(3) // 【注意】値が無いところを指定すると実行時にエラーになります！

    // 次回繰り返しの処理にListを使っていきます！

    Ok(
      s"""
         |listInt = $listInt<br>
         |one = $one<br>
         |two = $two<br>
         |three = $three<br>
         |""".stripMargin).as(HTML)
  }

  def chapter2_4_2 = Action { _ =>
    // 4. 繰り返しとコレクション
    // 4-2. 繰り返し処理のためのfor式

    // 前回のリストとfor式を使って繰り返し処理の例をみていきましょう。
    val listInt = List(1, 2, 3)
    var sum = 0
    // 以下がfor式です。
    for (n <- listInt) {
      sum = sum + n
    }
    // 以下のような記述になっています。
    // for (変数名 <- コレクション) { ループ処理 }

    // コレクションの値が順番に変数に入り、
    // ループ処理が行われる形になります。
    // 上記の例ではList(1, 2, 3)になっているので、

    // 1回目のループ処理
    // sum = sum + 1  // sumの値は1になります。
    // 2回目のループ処理
    // sum = sum + 2 // sumの値は3になります。
    // 3回目のループ処理
    // sum = sum + 3 // sumの値は6になります。

    // と、こうなるイメージです。
    // 別の例もみてみましょう。
    val listC = List('a', 'b', 'c')
    var str = ""
    for (s <- listC) {
      str = s"$str$s"
    }
    // 最終的にstr="abc"となります。

    // ちなみに今回のような、綺麗な連番や規則正しい文字であれば、
    // 上記のように、1つ1つ値を手書きしなくても、
    // 以下のように書く方法があるので、覚えておくと便利です。

    var sum2 = 0
    for (n <- 1 to 3) {
      sum2 = sum2 + n
    }

    var str2 = ""
    for (s <- 'a' to 'c') {
      str2 = s"$str2$s"
    }

    Ok(
      s"""
         |sum = $sum<br>
         |str = $str<br>
         |sum2 = $sum2<br>
         |str2 = $str2<br>
         |""".stripMargin).as(HTML)

    // `x to y`のように書いた時は、List型ではなく、
    // Range, NumericRange型であり、別のコレクションなのですが、
    // Listの親戚みたいなもん。ぐらいで捉えて頂いてOKです。
  }

  def chapter2_4_3 = Action { _ =>
    // 4. 繰り返しとコレクション
    // 4-3. 繰り返し処理のためのfor式 強化編その1 入れ子

    // 欲を出してもう少しループ処理の複雑な例にトライしてみましょう。
    // 今回は入れ子ループです。
    val one2nine = 1 to 9
    var kuku = ""
    for (i <- one2nine) {
      for (j <- one2nine) {
        kuku = kuku + s"$i * $j = ${i * j}<br>"
      }
    }

    // 結果が全てを物語ってくれますが、以下のようになります。
    // 1 * 1 = 1
    // 1 * 2 = 2
    // ...省略...
    // 9 * 8 = 72
    // 9 * 9 = 81

    // 外側のfor式の変数iが1~9へと変化していくわけですが、
    // そのループ処理の内側のfor式でも変数jが1~9へと変化していく形になり、

    // 1: 外側1回目のループ、内側1回目のループ
    // i = 1, j = 1
    // 2: 外側1回目のループ、内側2回目のループ
    // i = 1, j = 2
    // ...省略...
    // 80: 外側9回目のループ, 内側8回目のループ
    // i = 9, j = 8
    // 81: 外側9回目のループ, 内側8回目のループ
    // i = 9, j = 9

    // と、こんな感じで変数が変化していくわけです。ややこすぃ？
    // ちなみに、同じことを以下の書き方もできるので、覚えておくと便利です。
    var kuku2 = ""
    for (i <- one2nine; j <- one2nine) {
      kuku2 = kuku2 + s"$i * $j = ${i * j}<br>"
    }
    // 見た目がキレイになります。イイネ！

    Ok(kuku).as(HTML)
  }

  def chapter2_4_4 = Action { _ =>
    // 4. 繰り返しとコレクション
    // 4-4. 繰り返し処理のためのfor式 強化編その2 条件指定

    // さらに欲を出して、もーちょびっつ、
    // ループ処理を深堀りします。

    // 今まではコレクションの値を順番にループするだけでしたが、
    // たびたび登場する`if`様を使って、もう少し細やかに制御できます。
    // 具体例を見るが良しです。
    val one2nine = 1 to 9
    var str = ""
    for (i <- one2nine if i % 2 == 0) {
      str = s"$str$i"
    }
    // `if`が入り込みました。
    // いつものように(?)、ifの後にはBoolean型になる式を書きます。
    // そしてこれは、その結果がtrueの時だけループ処理を実行するよ。という意味になってます。
    // iには1~9が順番に入るわけですが、そのうちの、
    // i%2が0 => iを2で割った余りが0 => iが2の倍数
    // の時だけ処理するよ。ということです。
    // 結果は str="2468" です。

    // 折角なのでもう一例出しておきます。
    var str2 = ""
    for (i <- one2nine if i >= 3 && i <= 5) {
      str2 = s"$str2$i"
    }
    // 結果は str="345" です。
    // おわかりいただけただろうか🤔

    Ok(
      s"""
         |str = $str<br>
         |str2 = $str2
         |""".stripMargin).as(HTML)
  }

  def chapter2_4_5 = Action { _ =>
    // 4. 繰り返しとコレクション
    // 4-5. for式サヨナラ!?

    // ここで衝撃的なことを申し上げます。
    // 実は・・・少なくとも私個人は、for式によるループ処理を、
    // 滅多に書きません。。。
    // ※全く無いとは言えませんが。

    // 誤解のないようにと思いますが、
    // ループ処理自体は多用するのですが、
    // 今まで使ってきたfor式のやり方ではあんまりやらないよ。
    // ということです。

    // じゃあどうしてるの？ですが、それは秘密です👍

    // ・・・だとさすがにビンタを頂戴しそうなので、
    // 以下にサンプルを書きますが、すみません、今はこれを理解するための、
    // 前提知識をお伝えできていませんので、
    // 今の段階では全くわからなくてOKです。
    // 一旦、雰囲気だけを見てもらえたらと思います。

    // その1. 4-2での、合計値を出していたパターン
    val sum = (1 to 3).sum

    // その2. 4-2での、文字abcを結合していたパターン
    val str = ('a' to 'c').mkString("")

    // その3. 4-4での、2の倍数だけの例
    val str2 = (1 to 9).filter(_ % 2 == 0).mkString("")

    // その4. 4-3での、九九計算していた例
    val kuku = (for {
      i <- 1 to 9
      j <- 1 to 9
    } yield s"$i * $j = ${i * j}").mkString("<br>")
    // あれ？for使ってるじゃん？と思いましたか？
    // はい。実は、forだけの構文は滅多に使わないのは本当ですが、
    // 親戚(?)のfor-yield式はよく使います。
    // 時が来れば詳細を解説しますので、お楽しみに！

    // しつこいですが、今は意味不明で構いません。
    // 今後のための布石のような位置付けですので、
    // 気にせず次に進みましょう！！

    Ok(
      s"""
         |sum = $sum<br>
         |str = $str<br>
         |str2 = $str2<br>
         |kuku = <br>
         |$kuku
         |""".stripMargin).as(HTML)
  }
  
}
