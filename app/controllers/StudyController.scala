package controllers

import play.api.mvc._

import javax.inject._

@Singleton
class StudyController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def study = Action { _ =>
    // 6. クラス
    // 6-1. クラスって？

    // クラスというのは型だと思っていただいてほぼほぼ問題ナシです。
    // クラスは作れます。これはつまり型を自分で作れるということです。
    // といっても、難しく考える必要はありません。
    // 最近よく登場しているタプル型を思い出していただくと良いのですが、
    // あれと似たように、既存の型を組み合わせる形で定義します。
    // ただ、クラスの方が機能が多く、圧倒的に、拡張性・応用性が高く、
    // 現代のプログラミングの世界では、とてつもなく重要な要素の1つとなっています。
    
    // 前置きが長くなりましたが、
    // 早速前回やった硬貨の例をクラスでやってみます。
    // まずは(Int, Int, Int, Int, Int, Int)型を撲滅するために、
    // クラスを定義します。
    class Coins(val fiveHundred: Int,
                val oneHundred: Int,
                val fifty: Int,
                val ten: Int,
                val five: Int,
                val one: Int)
    // これでクラスができました。
    // クラスは`class クラス名(val フィールド名: 型)`という感じに書くことができます。
    // フィールドというのは"クラスが内包する変数"みたいなイメージで捉えてみてください。
    
    // 【補足事項】
    // クラス名の頭文字は大文字にするというのが一般的なので原則あわせましょう。
    // 逆に変数名・関数名は小文字から始めるのがScala言語では一般的です。
    // また英単語の区切りはスペース文字を使えないので、大文字にして表現することが多いです、
    // 例えば、`PenPineapple`といった記載方法です。
    // ・大文字から始まり、単語の区切りも大文字 → パスカルケース
    // ・小文字から始まり、単語の区切りが小文字 → キャメルケース
    // と呼ばれています。
    // 一方で、Scala界隈ではあまり登場しないですが、
    // ・単語区切りが`-`ハイフン(pen-pineapple) → ケバブケース
    // ・単語区切りが`_`アンダーバー(pen_pineapple) → スネークケース
    // と呼ばれています。この2つは頭が大文字になることがまずないので、
    // その違いによる呼び分けは、ほぼされてないと思われます(私は知りません)。
    // 【補足事項 終わり】
    
    // クラスはほぼ型と言いました。
    // クラスは定義しましたが、これは型を定義しただけですので、
    // 実際に変数に入れたり、関数の返り値などに利用する際には、
    // 値を作る必要があります。
    // クラスで定義した型の値を、インスタンスと呼ぶことがありますが、
    // インスタンスは`new`を使って以下のように生成できます。
    val coins = new Coins(1, 2, 3, 4, 5, 6)
    // タプルを作成するときの丸括弧の前に、newとクラス名をつける感じのイメージでしょうか。
    
    // ここからが重要です。
    
    // タプルと違い、クラスのフィールドには名前がつくので取得時にわかりやすくなります。
    // 例えば50円の枚数を取得する場合は以下となります。
    val numberOfFiftyYenCoin: Int = coins.fifty
    // タプルだと`coins._3`でしたが、意味のある表現に変わったので、
    // 読みやすくなったと感じませんでしょうか？
    // 説明が後付けなりましたが、`インスタンス.フィールド名`で、
    // そのフィールドの値が取得可能です。
    
    // さらにタプルとは違い、専用の型(クラス)名がつくのと、
    // それを自由に関数定義にも利用できるため、前回の500円→100円の両替関数は、
    // 次のように書き換えることができます。
    def exchange500For100(coins: Coins): Coins = {
      val exchanged100coins = coins.fiveHundred * 5
      new Coins(0, coins.oneHundred + exchanged100coins, coins.fifty, coins.ten, coins.five, coins.one)
    }
    // 使い方は全く同じです。
    val exchangedCoins = exchange500For100(coins)
    
    // いかがだったでしょう？
    // タプルを利用する時よりも、名前がつくことで、
    // 人の感覚に近い、表現でプログラムが書くことができることが、
    // 多少は伝わりましたでしょうか？
    
    // ただ、クラスはただ型を組合るだけのものでは全くなく、
    // もっとたくさんできることがあるので、
    // 次回以降で、もう少しクラスを掘り下げて行きたいと思います。
    
    Ok("クラス最高！").as(HTML)

  }

}
