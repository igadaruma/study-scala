package controllers

import play.api.mvc._

import javax.inject._

@Singleton
class StudyController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def study = Action { _ =>
    // 5. 関数
    // 5-3. 関数の引数

    // 前回の関数は、何も値が返ってこないものでした(Unit型の値を返しているとも言えます)。
    // 今回は呼び出す時に、なんらかの値を渡して(関数に渡す値のことを引数(ひきすう)といいます)、
    // かつ、値も返ってくる例をみていきます。

    // 以下の例はInt(整数)型の引数を2つ指定して、
    // 与えられた引数の内、大きい方の数字を返してくれる関数になります。

    def larger(a: Int, b: Int): Int = {
      // 引数の値は関数内でvalで宣言した変数のように扱えます。
      if (a >= b) a else b
    }

    // 使う際は以下のようになります。
    // 返り値を変数に入れています。

    val larger1 = larger(10, 100) // 100
    val larger2 = larger(-10, -100) // -10

    // 引数に指定する値は、数が足りなくても、多くても、
    // 型があわなくても、エラーになるので注意しましょう💣
    
    Ok(
      s"""
         |larger1 = $larger1<br>
         |larger2 = $larger2<br>
         |""".stripMargin).as(HTML)
    
    // ち・な・み・に💝
    // 今回実装したlarger関数ですが、
    // 実は`Math.max`という組込関数がはじめから用意されていて、
    // 以下のように利用できます。
    // Math.max(10, 100)
    
    // 他にも、便利な関数がたくさん初期から用意されているので、
    // 実際にプログラムを書いていく中では、
    // 作ろうとしている関数が既に存在しないかを、
    // 調べてから作る方が多くの場合に幸せになれると思います(ぐぐって調べる事が多くなると思います)。
    // ※プログラミングの練習目的にあえて自分で作るというのはグッドです🍀
    
    // また、Scala本体が用意していなくても、
    // オープンソース(ソースコードが一般的に公開されている)の
    // ライブラリ(便利な関数の集合体みたいなイメージ)も、
    // 世界の有志達のお陰で、たくさん存在していますので、これが活用できる場面を多々あります。
    // ライブラリの追加方法などについても、
    // 少し先になりますが、ご紹介する予定です。たぶん🐣
    
  }

}
