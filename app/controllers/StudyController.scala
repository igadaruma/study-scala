package controllers

import play.api.mvc._

import javax.inject._

@Singleton
class StudyController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def study = Action { _ =>
    // 5. 関数
    // 5-5. タプル型・・・だと厳しい？

    // 引き続きタプル型を使った例を見てみます。
    // お金をイメージいただき、
    // 硬貨の種類毎の枚数をタプル型で表現してみるとします。
    // 例えば左から大きい順に、500・100・50・10・5・1円玉の枚数としてタプル型を定義したとします。
    // 以下のような感じです。
    val coins: (Int, Int, Int, Int, Int, Int) = (1, 2, 3, 4, 5, 6)
    // 上記の例は、
    // 500円玉が1枚
    // 100円玉が2枚
    // ・・・省略・・・
    // 1円玉が6枚
    // というデータを変数に入れたようなイメージです。

    // この型のデータを引数に受け取り、
    // 500円玉を全て100円玉に両替するような関数を考えてみましょう。
    // 返り値は、両替した後の枚数になった同じ型の値を返します。
    // 以下のような感じです。
    def exchange500For100(coins: (Int, Int, Int, Int, Int, Int)): (Int, Int, Int, Int, Int, Int) = {
      val exchanged100coins = coins._1 * 5
      (0, coins._2 + exchanged100coins, coins._3, coins._4, coins._5, coins._6)
    }
    // 使用例はこんな感じ。
    val exchangedCoins = exchange500For100(coins)
    
    // ででで、まぁこれでも問題はないのですが、
    // (Int, Int, Int, Int, Int, Int)
    // この型は、みるだけでは、ただただIntが6つ並んでいるタプル型なので、
    // これが硬貨の枚数だという情報は、先に説明をもらわないと初見では解読しづらいと私は感じます。
    // さらにこの後のプログラムで、例えば、50円玉の枚数を取得しようとした場合に、
    // coins._3
    // という記載になりますが、50円玉が何番目かを頭で考えて記載する時に、
    // とても間違えやすそうにも感じます。
    
    // プログラムは書いた本人ですら、細かいことはすぐ忘れてしまうことが多いので、
    // 長く利用する・大きなプログラムでは特に、読みやすい・予想しやすいというのが重要になってきます。
    // プロが仕事で作成するプログラムは、数年以上使われるものも多いと思いますし、
    // チームで開発することが大半で、開発人員が途中入れ替わることも多々あります。
    // なので！プロが書くプログラムならば、
    // 開発の後継者(未来の自分も含めた)の人が、なるべく読みやすく書くべきと、私は考えています。
    // 初学者の方にプロの話を持ち出すのは、無粋かもしれませんが、
    // ぜひ意識していただきたいポイントだと思いましたので、少し長めに文章を入れてみました。

    // では今回の例を読みやすくするのはどうするの？ですが、
    // その1つの方法として、次回から登場する"クラス"というのを利用します。
    
    // 次回に続きます。
    
    Ok(
      s"""
         |coins = $coins<br>
         |exchangedCoins = $exchangedCoins<br>
         |""".stripMargin).as(HTML)

  }

}
