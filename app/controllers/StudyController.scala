package controllers

import play.api.mvc._

import javax.inject._

@Singleton
class StudyController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def study = Action { _ =>
    // 7. 組込クラスと高階関数とラムダ式
    // 7-3. ラムダ式の省略記法

    // 高階関数の引数に直接ラムダ式指定する際に、
    // 記述を省エネできる記法があります。
    // 便利なので利用する方も多いので読み書きできるようにしておきましょう。

    // 前回同様にtwice高階関数に登場してもらいましょう。
    def twice(n: Int, f: Int => Int): Int = f(f(n))

    // まずは最も基本的な形が以下です。 
    val r1_1 = twice(10, (n: Int) => n + 1)

    // ここから、twice側の引数の定義(Int => Int)より、
    // 引数の型があきらかなので、ラムダ式から引数の型を省略することができます。
    val r1_2 = twice(10, (n) => n + 1)

    // さらに、これは引数が1つの場合に限りますが、
    // `()`も省略できます。
    val r1_3 = twice(10, n => n + 1)

    // さらに、これで最後ですが、
    // ラムダ式の処理部分にて、引数を利用するのが1回だけの場合に限りますが、
    // 引数部分を省略して、引数にあたる部分を`_`と記載することができます。
    val r1_4 = twice(10, _ + 1)

    // "引数を利用するのが1回だけ"という条件があるので、
    // 例えば、以下のようなラムダ式は`_`記法はできません。
    twice(10, n => n + n)


    // 次に、引数が2つだった場合も見ていきます。
    // 例として、以下のような、第1引数の値を、
    // 2つ引数を持つ第2引数の関数に受け渡した結果を返す高階関数に登場してもらいます。
    def sameArg(n: Int, f: (Int, Int) => Int): Int = f(n, n)

    // 同様にだんだん省略していきます。
    val r2_1 = sameArg(10, (n1: Int, n2: Int) => n1 + n2)
    val r2_2 = sameArg(10, (n1, n2) => n1 + n2) // 引数の型の省略
    val r2_3 = sameArg(10, _ + _) // 1つ目の`_`が第1引数、2つ目が第2引数を表します。

    // 以上です！
    // 慣れないうちは、何度もわからなくなると思いますが、
    // 繰り返し勉強しているうちに、自然に読み書きできるようになりますので、
    // めげずに頑張ってみてください！
    // 慣れてさえしまえば、むしろ、この省略記法がとても楽に感じられるはずです！

    Ok(
      s"""
         |r1_1 = $r1_1<br>
         |r1_2 = $r1_2<br>
         |r1_3 = $r1_3<br>
         |r1_4 = $r1_4<br>
         |<br>
         |r2_1 = $r2_1<br>
         |r2_2 = $r2_2<br>
         |r2_3 = $r2_3<br>
         |""".stripMargin).as(HTML)

  }

}
