package controllers

import play.api.mvc._

import javax.inject._

@Singleton
class StudyController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def study = Action { _ =>
    // 6. クラス
    // 6-5. 組込型の演算子とメソッド

    // 以前よりInt型やString型を始めとした、
    // 色々な型を見てきました。その際、例えば、
    // Int型の足し算き算などを以下のように記載していたと思います。
    val number1 = 1 + 2
    
    // さて、前回Coinsには`+`というメソッドを定義して、
    // 上記と似た感じに利用していました。
    // 実は、Int型の`+`も逆に以下のように記載できます。
    val number2 = 1.+(2)
    
    // そうです？
    // 実は全ての型の演算子は、
    // 組込として初めから定義されてはいるものの、
    // 実体は各型(クラス)のメソッド(やフィールド)だったのです(ドーン！👻)
    
    // ただし`1`や`2`等のリテラルは、
    // Coinsと違って`new`してないですね？
    // 組込型の全てではないですが、
    // 組込型は利用頻度がとても多いものが多いので、
    // Scala言語が、特別にわかりやすい、
    // ある意味、特殊なインスタンス生成方法を用意しているのが、
    // 各リテラル表記だったのです。
    
    // ※全てのプログラミング言語が同じ仕組みというわけではないのでご注意ください。
    
    // 前回以下と記載していましたが、
    // > "そのクラスと関係の深い"処理を含めておけば、
    // > 読みやすいプログラムに仕上げられる場合があります。
    // 組み込みクラス・メソッドのこともおさらいしつつ、
    // クラス・メソッドのお陰で非常にわかりやすく記述できているというのが、
    // 多少でも体感・認識いただけると嬉しいなと思います。
    
    Ok("クラス最高！メソッド最高！").as(HTML)

  }

}
