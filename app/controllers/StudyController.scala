package controllers

import play.api.mvc._

import javax.inject._

@Singleton
class StudyController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def study = Action { _ =>
    // 5. 関数
    // 5-1. 関数の無い世界
    
    // 急ですが、例えば、ゲーム等で人型のキャラクターがいたとします。
    // そのキャラクターが"前に移動"させるのに、以下の処理が必要だったとします。
    // 【注意】説明のために意味のないプログラムを書いています💩
    var state = ""
    state = "右足を上げる。"
    state = "右足を前に出す。"
    state = "右足を下げる。"
    state = "左足を上げる。"
    state = "左足を前に出す。"
    state = "左足を下げる。"
    
    // 上記はあくまでもイメージですが、
    // 実際のプログラミングでも、何かをしたい時に、
    // 細かく指示を書いていくことは多々発生します。
    // では、さらに、キャラクターが"右に移動"する処理が以下だったとします。
    state = "右足を上げる。"
    state = "右足を右に出す。"
    state = "右足を下げる。"
    state = "左足を上げる。"
    state = "左足を右に出す。"
    state = "左足を下げる。"
    
    // よし！ここまでの処理がかけたので、
    // 前・右・前と進む処理を書くぞ！となった場合。
    // 以下と書いていくのは、なんとなく地獄感を感じるのではないでしょうか？
    state = "右足を上げる。"
    state = "右足を前に出す。"
    state = "右足を下げる。"
    state = "左足を上げる。"
    state = "左足を前に出す。"
    state = "左足を下げる。"
    state = "右足を上げる。"
    state = "右足を右に出す。"
    state = "右足を下げる。"
    state = "左足を上げる。"
    state = "左足を右に出す。"
    state = "左足を下げる。"
    state = "右足を上げる。"
    state = "右足を前に出す。"
    state = "右足を下げる。"
    state = "左足を上げる。"
    state = "左足を前に出す。"
    state = "左足を下げる。"
    
    // プログラミングをしていますと、日常的に、
    // よりよくするための改善や、
    // だめなところを直すためのバグ・不具合修正を行います。
    
    // 例えば、"前に移動"する処理が、本当は、
    // "右足を上げる"前に、"左足で踏ん張る"が必要であり、
    // 同様に、"左足を上げる前に"、"右足で踏ん張る"が必要だったと"後から"判明した場合、
    // 上記のプログラムを修正するだけでも、
    // 書き間違えそう感は否めません。
    
    // この地獄から私達を救ってくれるのが、
    // そう。関数です。
    
    // 次回へ続く！
    
    Ok("関数最高！").as(HTML)
  }

}
