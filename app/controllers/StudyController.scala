package controllers

import play.api.mvc._

import javax.inject._

@Singleton
class StudyController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  def study = Action { _ =>
    // 7. 組込クラスと高階関数とラムダ式
    // 7-2. 高階関数

    // 前回のOption型をもっと掘り下げて解説したいのですが、
    // その話をするための準備としまして、
    // 高階関数の話をしなければなりません。
    // そしてさらに、高階関数を説明するために、
    // 関数自体を変数や引数として利用できるという話をさせていただきます。

    // 何をいっているかわかりませんね？
    // 百聞は一見に如かずですので、具体例を見ていきましょう。
    // まずは関数を普通に定義してみましょう。
    // 引数の値に1を足した数を返す関数の例です。
    def add1(a: Int): Int = a + 1

    // 実はこれとほぼ等価な、次のような別の書き方があります。
    val addOne = (a: Int) => a + 1
    // この`(引数定義) => { 処理の中身 }`といった書き方は、
    // ”ラムダ式”と呼ばれています。
    // 括弧`{}`は処理が1行だけなら通常の関数定義と同様に省略可能です。
    // ラムダ式は"関数を返す"専用構文で、上記であれば、
    // 変数`addOne`にラムダ式で作った関数を入れている、という状態です。
    // 共に全く同じように関数処理を呼び出すことが可能です。
    val tenAdd1 = add1(10) // 11
    val tenAddOne = addOne(10) // 11

    // さて、ここで少々、興味深い話題があります。
    // 関数を作って返すラムダ式が存在し、関数が変数に入るという事実はつまり・・、
    // "関数の引数に、関数を指定することもできる" ということです。
    // これは、ややこしくなってきましたね？

    // 前述の`addOne`ですが、変数には必ず型がありますので、
    // 関数にも型があることになります。
    // 型アノテーションで明示すると以下のようになっています。
    val addOneWithTypeAnnotation: Int => Int = addOne
    // ちなみにdefで定義した関数を、改めて変数に格納することもできます。
    val add1WithTypeAnnotation: Int => Int = add1
    // 関数の型は `=>`よりも、
    // 左が、関数の引数の型を表し、
    // 右が、関数の返り値の型を表しています。
    // 引数が複数の場合は、括弧がついて以下のような形になります。
    // (Int, Int) => Int
    // 上記の例はInt型の引数を2つとって、Int型を返す関数の型です。

    // 関数の型定義がわかったところで、
    // 関数を引数にとる関数の例を出してみます。
    // 以下は、第1引数にIntの値をとり、
    // その値に対して、第2引数の関数を2回実行した値を返す例です。
    def twice(n: Int, f: Int => Int): Int = {
      // 以下、2重括弧になっていて、ややこしく感じるかもしれませんが、
      // まず、nを内側の関数fが引数にとって処理した結果を、
      // さらに外側のfが引数としてとって、 再度処理するという順番になります。
      f(f(n))
    }

    // これを使う場合はこんな感じ。
    val tenAdd1Twice = twice(10, add1) // 12 // def由来でも、
    val tenAddOneTwice = twice(10, addOne) // 12 // ラムダ式由来でもOKです。
    // さらにいえば、defやvalで関数に名前をつけずに、
    // いきなりラムダ式を引数に指定することもできます。
    val tenAdd1TwiceByLambda = twice(10, (n: Int) => n + 1)
    
    // このtwice関数のように、関数を引数に取る関数は、
    // 高階関数と呼ばれています。
    // 高階関数は、抽象度が高い仕組みなので、
    // ちょっと難しかったかもしれません。
    // ただ、その分とても、強力な武器になりますし、
    // 組込型のメソッドにも非常によく使われています。
    // Option・Listのメソッドにも頻出します。
    // そしてこれらのメソッドの利用頻度もとても高いので、
    // ぜひ理解していきましょう。
    
    Ok(
      s"""
         |tenAdd1 = $tenAdd1<br>
         |tenAddOne = $tenAddOne<br>
         |tenAdd1Twice = $tenAdd1Twice<br>
         |tenAddOneTwice = $tenAddOneTwice<br>
         |tenAdd1TwiceByLambda = $tenAdd1TwiceByLambda<br>
         |""".stripMargin).as(HTML)
    
    // 【補足事項①】
    // 関数を変数や引数に指定ができることを、
    // "関数が第一級値である"と表現されることがあります。
    // 覚えなくていいと思います。
    // プログラミング言語によっては、これができないものもあります。
    // 【補足事項① ここまで】
    
    // 【補足事項②】
    // twiceの第2引数の名前はfを指定していましたが、
    // これは、関数が英語でFunctionなので、その頭文字をとった形でした。
    // 変数や引数の名前は、それが何を意味しているかを理解しやすい名前にするのが良いのですが、
    // 高階関数の引数における関数は、それが関数であるということぐらいの意味しか言い表せない場合が多いため、
    // 単純に`f`といった簡素な名前がつけられることが慣習上多くなっています。
    // 引数に関数が複数ある場合は、アルファベット順に、f -> g -> hみたいに命名されることが多いです。
    // 【補足事項② ここまで】
  }

}
